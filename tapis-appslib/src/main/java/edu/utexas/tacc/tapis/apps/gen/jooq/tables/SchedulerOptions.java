/*
 * This file is generated by jOOQ.
 */
package edu.utexas.tacc.tapis.apps.gen.jooq.tables;


import edu.utexas.tacc.tapis.apps.gen.jooq.Keys;
import edu.utexas.tacc.tapis.apps.gen.jooq.TapisApp;
import edu.utexas.tacc.tapis.apps.gen.jooq.tables.records.SchedulerOptionsRecord;
import edu.utexas.tacc.tapis.apps.model.App.InputMode;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SchedulerOptions extends TableImpl<SchedulerOptionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tapis_app.scheduler_options</code>
     */
    public static final SchedulerOptions SCHEDULER_OPTIONS = new SchedulerOptions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SchedulerOptionsRecord> getRecordType() {
        return SchedulerOptionsRecord.class;
    }

    /**
     * The column <code>tapis_app.scheduler_options.seq_id</code>. Arg sequence id
     */
    public final TableField<SchedulerOptionsRecord, Integer> SEQ_ID = createField(DSL.name("seq_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "Arg sequence id");

    /**
     * The column <code>tapis_app.scheduler_options.app_ver_seq_id</code>. Sequence id of application
     */
    public final TableField<SchedulerOptionsRecord, Integer> APP_VER_SEQ_ID = createField(DSL.name("app_ver_seq_id"), SQLDataType.INTEGER, this, "Sequence id of application");

    /**
     * The column <code>tapis_app.scheduler_options.arg_val</code>.
     */
    public final TableField<SchedulerOptionsRecord, String> ARG_VAL = createField(DSL.name("arg_val"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field("''::text", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>tapis_app.scheduler_options.name</code>.
     */
    public final TableField<SchedulerOptionsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>tapis_app.scheduler_options.description</code>.
     */
    public final TableField<SchedulerOptionsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>tapis_app.scheduler_options.input_mode</code>.
     */
    public final TableField<SchedulerOptionsRecord, InputMode> INPUT_MODE = createField(DSL.name("input_mode"), SQLDataType.CLOB.nullable(false), this, "", new EnumConverter<String, InputMode>(String.class, InputMode.class));

    /**
     * The column <code>tapis_app.scheduler_options.meta</code>.
     */
    public final TableField<SchedulerOptionsRecord, String[]> META = createField(DSL.name("meta"), SQLDataType.CLOB.getArrayDataType(), this, "");

    private SchedulerOptions(Name alias, Table<SchedulerOptionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private SchedulerOptions(Name alias, Table<SchedulerOptionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>tapis_app.scheduler_options</code> table reference
     */
    public SchedulerOptions(String alias) {
        this(DSL.name(alias), SCHEDULER_OPTIONS);
    }

    /**
     * Create an aliased <code>tapis_app.scheduler_options</code> table reference
     */
    public SchedulerOptions(Name alias) {
        this(alias, SCHEDULER_OPTIONS);
    }

    /**
     * Create a <code>tapis_app.scheduler_options</code> table reference
     */
    public SchedulerOptions() {
        this(DSL.name("scheduler_options"), null);
    }

    public <O extends Record> SchedulerOptions(Table<O> child, ForeignKey<O, SchedulerOptionsRecord> key) {
        super(child, key, SCHEDULER_OPTIONS);
    }

    @Override
    public Schema getSchema() {
        return TapisApp.TAPIS_APP;
    }

    @Override
    public Identity<SchedulerOptionsRecord, Integer> getIdentity() {
        return (Identity<SchedulerOptionsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SchedulerOptionsRecord> getPrimaryKey() {
        return Keys.SCHEDULER_OPTIONS_PKEY;
    }

    @Override
    public List<UniqueKey<SchedulerOptionsRecord>> getKeys() {
        return Arrays.<UniqueKey<SchedulerOptionsRecord>>asList(Keys.SCHEDULER_OPTIONS_PKEY);
    }

    @Override
    public List<ForeignKey<SchedulerOptionsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SchedulerOptionsRecord, ?>>asList(Keys.SCHEDULER_OPTIONS__SCHEDULER_OPTIONS_APP_VER_SEQ_ID_FKEY);
    }

    private transient AppsVersions _appsVersions;

    public AppsVersions appsVersions() {
        if (_appsVersions == null)
            _appsVersions = new AppsVersions(this, Keys.SCHEDULER_OPTIONS__SCHEDULER_OPTIONS_APP_VER_SEQ_ID_FKEY);

        return _appsVersions;
    }

    @Override
    public SchedulerOptions as(String alias) {
        return new SchedulerOptions(DSL.name(alias), this);
    }

    @Override
    public SchedulerOptions as(Name alias) {
        return new SchedulerOptions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SchedulerOptions rename(String name) {
        return new SchedulerOptions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SchedulerOptions rename(Name name) {
        return new SchedulerOptions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, String, String, String, InputMode, String[]> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
