/*
 * This file is generated by jOOQ.
 */
package edu.utexas.tacc.tapis.apps.gen.jooq.tables;


import edu.utexas.tacc.tapis.apps.gen.jooq.Indexes;
import edu.utexas.tacc.tapis.apps.gen.jooq.Keys;
import edu.utexas.tacc.tapis.apps.gen.jooq.TapisApp;
import edu.utexas.tacc.tapis.apps.gen.jooq.tables.records.AppsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Apps extends TableImpl<AppsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tapis_app.apps</code>
     */
    public static final Apps APPS = new Apps();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AppsRecord> getRecordType() {
        return AppsRecord.class;
    }

    /**
     * The column <code>tapis_app.apps.seq_id</code>. Application sequence id
     */
    public final TableField<AppsRecord, Integer> SEQ_ID = createField(DSL.name("seq_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "Application sequence id");

    /**
     * The column <code>tapis_app.apps.tenant</code>. Tenant name associated
     * with the application
     */
    public final TableField<AppsRecord, String> TENANT = createField(DSL.name("tenant"), SQLDataType.CLOB.nullable(false), this, "Tenant name associated with the application");

    /**
     * The column <code>tapis_app.apps.id</code>. Unique name for the
     * application
     */
    public final TableField<AppsRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "Unique name for the application");

    /**
     * The column <code>tapis_app.apps.latest_version</code>.
     */
    public final TableField<AppsRecord, String> LATEST_VERSION = createField(DSL.name("latest_version"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>tapis_app.apps.owner</code>. User name of application
     * owner
     */
    public final TableField<AppsRecord, String> OWNER = createField(DSL.name("owner"), SQLDataType.CLOB.nullable(false), this, "User name of application owner");

    /**
     * The column <code>tapis_app.apps.enabled</code>. Indicates if application
     * is currently active and available for use
     */
    public final TableField<AppsRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "Indicates if application is currently active and available for use");

    /**
     * The column <code>tapis_app.apps.containerized</code>.
     */
    public final TableField<AppsRecord, Boolean> CONTAINERIZED = createField(DSL.name("containerized"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>tapis_app.apps.deleted</code>. Indicates if application
     * has been soft deleted
     */
    public final TableField<AppsRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "Indicates if application has been soft deleted");

    /**
     * The column <code>tapis_app.apps.created</code>. UTC time for when record
     * was created
     */
    public final TableField<AppsRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("timezone('utc'::text, now())", SQLDataType.LOCALDATETIME)), this, "UTC time for when record was created");

    /**
     * The column <code>tapis_app.apps.updated</code>. UTC time for when record
     * was last updated
     */
    public final TableField<AppsRecord, LocalDateTime> UPDATED = createField(DSL.name("updated"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("timezone('utc'::text, now())", SQLDataType.LOCALDATETIME)), this, "UTC time for when record was last updated");

    private Apps(Name alias, Table<AppsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Apps(Name alias, Table<AppsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>tapis_app.apps</code> table reference
     */
    public Apps(String alias) {
        this(DSL.name(alias), APPS);
    }

    /**
     * Create an aliased <code>tapis_app.apps</code> table reference
     */
    public Apps(Name alias) {
        this(alias, APPS);
    }

    /**
     * Create a <code>tapis_app.apps</code> table reference
     */
    public Apps() {
        this(DSL.name("apps"), null);
    }

    public <O extends Record> Apps(Table<O> child, ForeignKey<O, AppsRecord> key) {
        super(child, key, APPS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : TapisApp.TAPIS_APP;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.APP_TENANT_ID_IDX);
    }

    @Override
    public Identity<AppsRecord, Integer> getIdentity() {
        return (Identity<AppsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AppsRecord> getPrimaryKey() {
        return Keys.APPS_PKEY;
    }

    @Override
    public List<UniqueKey<AppsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.APPS_TENANT_ID_KEY);
    }

    @Override
    public Apps as(String alias) {
        return new Apps(DSL.name(alias), this);
    }

    @Override
    public Apps as(Name alias) {
        return new Apps(alias, this);
    }

    @Override
    public Apps as(Table<?> alias) {
        return new Apps(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Apps rename(String name) {
        return new Apps(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Apps rename(Name name) {
        return new Apps(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Apps rename(Table<?> name) {
        return new Apps(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, String, String, String, Boolean, Boolean, Boolean, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super Boolean, ? super Boolean, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super Boolean, ? super Boolean, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
