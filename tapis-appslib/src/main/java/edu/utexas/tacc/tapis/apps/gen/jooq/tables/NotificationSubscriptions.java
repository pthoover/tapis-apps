/*
 * This file is generated by jOOQ.
 */
package edu.utexas.tacc.tapis.apps.gen.jooq.tables;


import edu.utexas.tacc.tapis.apps.gen.jooq.Keys;
import edu.utexas.tacc.tapis.apps.gen.jooq.TapisApp;
import edu.utexas.tacc.tapis.apps.gen.jooq.tables.records.NotificationSubscriptionsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NotificationSubscriptions extends TableImpl<NotificationSubscriptionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tapis_app.notification_subscriptions</code>
     */
    public static final NotificationSubscriptions NOTIFICATION_SUBSCRIPTIONS = new NotificationSubscriptions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationSubscriptionsRecord> getRecordType() {
        return NotificationSubscriptionsRecord.class;
    }

    /**
     * The column <code>tapis_app.notification_subscriptions.seq_id</code>.
     */
    public final TableField<NotificationSubscriptionsRecord, Integer> SEQ_ID = createField(DSL.name("seq_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>tapis_app.notification_subscriptions.app_ver_seq_id</code>.
     */
    public final TableField<NotificationSubscriptionsRecord, Integer> APP_VER_SEQ_ID = createField(DSL.name("app_ver_seq_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>tapis_app.notification_subscriptions.filter</code>.
     */
    public final TableField<NotificationSubscriptionsRecord, String> FILTER = createField(DSL.name("filter"), SQLDataType.CLOB, this, "");

    private NotificationSubscriptions(Name alias, Table<NotificationSubscriptionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private NotificationSubscriptions(Name alias, Table<NotificationSubscriptionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>tapis_app.notification_subscriptions</code> table reference
     */
    public NotificationSubscriptions(String alias) {
        this(DSL.name(alias), NOTIFICATION_SUBSCRIPTIONS);
    }

    /**
     * Create an aliased <code>tapis_app.notification_subscriptions</code> table reference
     */
    public NotificationSubscriptions(Name alias) {
        this(alias, NOTIFICATION_SUBSCRIPTIONS);
    }

    /**
     * Create a <code>tapis_app.notification_subscriptions</code> table reference
     */
    public NotificationSubscriptions() {
        this(DSL.name("notification_subscriptions"), null);
    }

    public <O extends Record> NotificationSubscriptions(Table<O> child, ForeignKey<O, NotificationSubscriptionsRecord> key) {
        super(child, key, NOTIFICATION_SUBSCRIPTIONS);
    }

    @Override
    public Schema getSchema() {
        return TapisApp.TAPIS_APP;
    }

    @Override
    public Identity<NotificationSubscriptionsRecord, Integer> getIdentity() {
        return (Identity<NotificationSubscriptionsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<NotificationSubscriptionsRecord> getPrimaryKey() {
        return Keys.NOTIFICATION_SUBSCRIPTIONS_PKEY;
    }

    @Override
    public List<UniqueKey<NotificationSubscriptionsRecord>> getKeys() {
        return Arrays.<UniqueKey<NotificationSubscriptionsRecord>>asList(Keys.NOTIFICATION_SUBSCRIPTIONS_PKEY);
    }

    @Override
    public List<ForeignKey<NotificationSubscriptionsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<NotificationSubscriptionsRecord, ?>>asList(Keys.NOTIFICATION_SUBSCRIPTIONS__NOTIFICATION_SUBSCRIPTIONS_APP_VER_SEQ_ID_FKEY);
    }

    private transient AppsVersions _appsVersions;

    public AppsVersions appsVersions() {
        if (_appsVersions == null)
            _appsVersions = new AppsVersions(this, Keys.NOTIFICATION_SUBSCRIPTIONS__NOTIFICATION_SUBSCRIPTIONS_APP_VER_SEQ_ID_FKEY);

        return _appsVersions;
    }

    @Override
    public NotificationSubscriptions as(String alias) {
        return new NotificationSubscriptions(DSL.name(alias), this);
    }

    @Override
    public NotificationSubscriptions as(Name alias) {
        return new NotificationSubscriptions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationSubscriptions rename(String name) {
        return new NotificationSubscriptions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationSubscriptions rename(Name name) {
        return new NotificationSubscriptions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
